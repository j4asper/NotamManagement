<MudCard>
    <MudCardContent>
        <MudText>
            <pre>
            <MudHighlighter Text="@Notam.RawNotam" HighlightedTexts="@specialTerms" />
            </pre>
        </MudText>
    </MudCardContent>
    @if (ShowActions)
    {
        <MudCardActions>
            <MudStack Row="true" Spacing="4" StretchItems="StretchItems.All" Class="full-width">
                <MudButton Style="width: 200px" OnClick="@CreateNotamAction" Variant="Variant.Outlined" Color="Color.Primary">Handle</MudButton>
                <MudSelect Style="width: 300px" T="Importance" Variant="Variant.Outlined" @bind-Value="@selectedImportance">
                    @foreach (Importance item in Enum.GetValues(typeof(Importance)))
                    {
                        <MudSelectItem Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField Style="width: 700px" T="string" @bind-Value="@note" Variant="Variant.Outlined" Placeholder="Note"/>
            </MudStack>
        </MudCardActions>
    }
</MudCard>

@code {
    [Inject] public INotamActionService NotamActionService { get; set; } = null!;
    [Inject] public ApiAuthenticationStateProvider AuthStateProvider { get; set; } = null!;
    [Inject] public ISnackbar Snackbar { get; set; } = null!;
    
    [Parameter] public EventCallback<Notam> OnNotamActionCreated { get; set; }
    [Parameter] public bool ShowActions { get; set; } = false;
    [Parameter] [EditorRequired] public Notam Notam { get; set; } = null!;

    private Importance selectedImportance;
    private string note;

    private List<string> specialTerms = [ // Airspace and Navigation
           "AD", // Aerodrome
    "CTR", // Control Zone
    "FIR", // Flight Information Region
    "AWY", // Airway
    "UTA", // Upper Control Area
    "ATZ", // Aerodrome Traffic Zone

    // Runways and Taxiways
    "RWY", // Runway
    "TWY", // Taxiway
    "APRON", // Aircraft parking area
    "CLSD", // Closed
    "OPS", // Operations
    "LGT", // Lighting (e.g., runway lighting)
    "LDG", // Landing
    "TKOF", // Takeoff
    "RWY CLSD", // Runway Closed

    // Equipment and Systems
    "ILS", // Instrument Landing System
    "VOR", // VHF Omnidirectional Range
    "DME", // Distance Measuring Equipment
    "NDB", // Non-Directional Beacon
    "GP", // Glide Path (part of ILS)
    "LOC", // Localizer (part of ILS)
    "RVR", // Runway Visual Range

    // Weather and Conditions
    "WX", // Weather
    "SIGMET", // Significant Meteorological Information
    "SN", // Snow
    "FZRA", // Freezing Rain
    "TS", // Thunderstorm
    "BR", // Mist
    "FG", // Fog
    "HZ", // Haze
    "WND", // Wind
    "TURB", // Turbulence
    "ICG", // Icing

    // Restrictions and Hazards
    "PJE", // Parachute Jumping Exercise
    "UAS", // Unmanned Aircraft System (drone activity)
    "RMK", // Remarks
    "TFR", // Temporary Flight Restriction
    "VIP", // VIP movement or restrictions
    "PROH", // Prohibited
    "DNG", // Dangerous

    // Other Operational Terms
    "EOBT", // Estimated Off-Block Time
    "ETA", // Estimated Time of Arrival
    "ETD", // Estimated Time of Departure
    "DEP", // Departure
    "ARR", // Arrival
    "TFC", // Traffic
    "TRG", // Training
    "FREQ", // Frequency
    "STNR", // Stationary
    "TEMP" // Temporary
       ];

    private async Task CreateNotamAction()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var organizationId = user.FindFirst("OrganizationId")!.Value;
        
        await NotamActionService.AddAsync(new NotamAction
        {
            OrganizationId = int.Parse(organizationId),
            NotamId = Notam.Id,
            Importance = selectedImportance,
            Note = string.IsNullOrEmpty(note) ? null : note
        });
        
        Snackbar.Add("Notam Action Created!", Severity.Success);
        
        await OnNotamActionCreated.InvokeAsync(Notam);
    }
}