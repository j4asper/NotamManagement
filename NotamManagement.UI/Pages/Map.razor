@page "/map"
@using LeafletForBlazor
@using NotamManagement.UI.Pages.Dialogs
@using System.Net.Http.Headers
@if (!isLoaded)
{
    <div>Loading, please wait...</div>
}
else
{
    <RealTimeMap @ref="leafletMap" height="calc(100vh - 10rem)" width="calc(100vw - 18rem)" OnClickMap="OnClickMap" OnAfterMapLoaded="AddMarker" />
}


@code {


    [Inject] public INotamService NotamService { get; set; } = null!;
    [Inject] public IDialogService dialogService { get; set; } = null!;
    [Inject] public Blazored.LocalStorage.ILocalStorageService LocalStorage { get; set; } = null!;
    [Inject] public HttpClient HttpClient { get; set; } = null!;
    RealTimeMap? leafletMap;
    IReadOnlyList<Notam>? notams;
    List<RealTimeMap.StreamPoint> points = new();
    bool isLoaded = false;
    RealTimeMap.PointSymbol symbol = new RealTimeMap.PointSymbol()
        {
            color = "blue",
            fillColor = "blue",
            fillOpacity = 0.5,
            radius = 10
        };


    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("jwt_token");
        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var random = new Random();
        await base.OnInitializedAsync();
        var n = await NotamService.GetAllNotamsAsync();
        notams = n;
        foreach (var notam in notams)
        {
            notam.Coordinates.Latitude += (float)(random.NextDouble() * 0.001);
            notam.Coordinates.Longitude += (float)(random.NextDouble() * 0.001);
            points.Add(new RealTimeMap.StreamPoint
                {
                    latitude = notam.Coordinates.Latitude,
                    longitude = notam.Coordinates.Longitude,
                    value = (Notam)notam,
                    type = "Notam",
                    guid = Guid.NewGuid()
                });
        }

        isLoaded = true;

    }

    public async Task OnClickMap(RealTimeMap.ClicksMapArgs value)
    {
        List<RealTimeMap.StreamPoint> foundPoints = (value.sender as RealTimeMap).Geometric.Points.getItems(
            point => (value.sender as RealTimeMap).Geometric.Computations.distance(
                point,
                new RealTimeMap.StreamPoint() { latitude = value.location.latitude, longitude = value.location.longitude },
                RealTimeMap.UnitOfMeasure.meters
            ) <= 100
        );

        if (foundPoints is null || foundPoints.Count == 0) return;

        foreach(var pointi in foundPoints)
        {
            await OpenNotamDialog(pointi.value as Notam);
        }

        // var point = foundPoints.Last();

        // var pointAttributes = point.value as Notam;

        // if (pointAttributes is null) return;
        // await OpenNotamDialog(pointAttributes);


    }


    private async Task OpenNotamDialog(Notam notam)
    {



        var parameters = new DialogParameters<ViewNotamFromMap> { { x => x.Notam, notam } };

        var dialog = await dialogService.ShowAsync<ViewNotamFromMap>("View notam", parameters);
        var result = await dialog.Result;


    }

    private async Task AddMarker()
    {


            if (leafletMap != null)
            {

                leafletMap.Geometric.Points.AppearanceOnType(item => item.type == "Notam").pattern = new RealTimeMap.PointTooltip()
                    {
                        content = "<b>Identifier:</b> ${value.identifier}</br> <b>FIR:</b> ${value.fir} </br> <b>NOF: </b>${value.notamOffice}</br> <b>Valid from:</b> ${value.validFrom} </br> <b>Valid to:</b> ${value.validTo}",
                        opacity = 0.6,
                        permanent = false


                    };
                leafletMap.Geometric.Points.AppearanceOnType(item => item.type == "Notam").pattern = new RealTimeMap.PointSymbol()
                    {
                        color = "blue",
                        fillColor = "blue",
                        fillOpacity = 0.2,
                        opacity = 0.7,
                        radius = 10

                    };


                await leafletMap.Geometric.Points.upload(points, false, symbol);
            }
        
 





    }
}