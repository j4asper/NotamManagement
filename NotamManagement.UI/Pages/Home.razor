@page "/"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Headers



<PageTitle>Home</PageTitle>

<MudStack Row="true">
    <NotamListViewComponent Notams="Notams" />
    <MudStack>
        <MudStack Row="true">
            <MudSelect T="string" Label="Sort by" Variant="Variant.Filled" @bind-Value="selectedFilter">
                <MudSelectItem Value="@("Importance")">Importance</MudSelectItem>
                <MudSelectItem Value="@("some thing")">some thing</MudSelectItem>
                <MudSelectItem Value="@("Whatever")">Whatever</MudSelectItem>
            </MudSelect>
            <MudSwitch @bind-Value="showIgnored" Label="Show Ignored notams" Color="Color.Primary" />
        </MudStack>
        
        <NotamActionListViewComponent  NotamActions="NotamActionsFiltered" />
    </MudStack>
</MudStack>

@code
{
    [Inject] public INotamService NotamService { get; set; } = null!;
    [Inject] public HttpClient HttpClient { get; set; } = null!;
    [Inject] public INotamActionService notamActionService { get; set; } = null!;
    [Inject] public Blazored.LocalStorage.ILocalStorageService LocalStorage { get; set; } = null!;

    private List<Notam> Notams = [];
    private List<NotamAction> NotamActions = [];
    private List<NotamAction> NotamActionsFiltered = [];
    private string selectedFilter 
    { 
        get => _selectedFilter; 
        set 
        { 
            _selectedFilter = value; 
            FilterChanged(); 
        } 
    }
    private string _selectedFilter;


    private bool _showIgnored = false;

    public bool showIgnored
    {
        get { return _showIgnored; }
        set { _showIgnored = value;
            ShowIgnored();
            FilterChanged();
        }
    }
    

    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("jwt_token");
        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);


        var notamActions = await notamActionService.GetAllNotamActionsAsync();
        NotamActions = notamActions.ToList();
        NotamActionsFiltered = NotamActions.ToList();

        await GetAllNotams();
    }

    private void FilterChanged()
    {
        if (_selectedFilter == "Importance")
        {
            NotamActionsFiltered = NotamActionsFiltered
                .OrderBy(x =>(int) x.Importance == 2 ? 0 : x.Importance == 0 ? 1 : 2)
                .ToList();
        }
        else if (_selectedFilter == "some thing")
        {
            NotamActionsFiltered = NotamActionsFiltered.OrderBy(x => Guid.NewGuid()).ToList();
        }
        StateHasChanged();
        ShouldRender();
    }

    private void ShowIgnored()
    {
        if(showIgnored == true)
        {
            NotamActionsFiltered = NotamActions.ToList();
        }
        else
        {
           NotamActionsFiltered.RemoveAll(x => x.Importance == Importance.Ignore);
        }
    }


    private async Task GetAllNotams()
    {
        StateHasChanged();

        try
        {
            var enumerableTask = NotamService.GetAllNotamsAsAsyncEnumerable();

            List<Notam> notamResults = [];
            Notams = notamResults;
            
            StateHasChanged();

            var i = 0;

            await foreach (var item in enumerableTask)
            {
                notamResults.Add(item);
                i++;

                if (i > 50)
                {
                    i = 0;
                    StateHasChanged();

                    await Task.Delay(10);
                }
            }
        }
        catch
        {
            Notams = [];
        }
        finally
        {
            StateHasChanged();
        }
    }
}
