@page "/"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Headers



<PageTitle>Home</PageTitle>

<MudStack Row="true">
    <NotamListViewComponent Notams="Notams" />

    <NotamActionListViewComponent NotamActions="NotamActions" />
</MudStack>

@code
{
    [Inject] public INotamService NotamService { get; set; } = null!;
    [Inject] public HttpClient HttpClient { get; set; } = null!;
    [Inject] public INotamActionService notamActionService { get; set; } = null!;
    [Inject] public Blazored.LocalStorage.ILocalStorageService LocalStorage { get; set; } = null!;
    
    private List<Notam> Notams = [];
    private List<NotamAction> NotamActions = [];

    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("jwt_token");
        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
       
        
        var notamActions = await notamActionService.GetAllNotamActionsAsync();
        NotamActions = notamActions.ToList();
        
        await GetAllNotams();
    }

    private async Task GetAllNotams()
    {
        StateHasChanged();

        try
        {
            var enumerableTask = NotamService.GetAllNotamsAsAsyncEnumerable();

            List<Notam> notamResults = [];
            Notams = notamResults;
            
            StateHasChanged();

            var i = 0;

            await foreach (var item in enumerableTask)
            {
                notamResults.Add(item);
                i++;

                if (i > 50)
                {
                    i = 0;
                    StateHasChanged();

                    await Task.Delay(10);
                }
            }
        }
        catch
        {
            Notams = [];
        }
        finally
        {
            StateHasChanged();
        }
    }
}
