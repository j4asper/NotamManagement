@page "/"
@attribute [Authorize]

<PageTitle>Home</PageTitle>

<MudText Typo="Typo.h4">Unhandled Notams</MudText>

<MudDataGrid Items="Notams" Virtualize="true" Height="80vh">
    <Columns>
        <HierarchyColumn InitiallyExpandedFunc="_ => true"/>
        <PropertyColumn Property="x => x.Identifier"/>
        <PropertyColumn Property="x => x.Type"/>
        <PropertyColumn Property="x => x.FIR"/>
        <PropertyColumn Property="x => x.Location"/>
        <PropertyColumn Property="x => x.ValidFrom" Title="Valid From"/>
        <PropertyColumn Property="x => x.ValidTo" Title="Valid To"/>
        <TemplateColumn Title="Actions">
            <CellTemplate>
                <MudIconButton Icon="@Icons.Material.Filled.Map" Color="Color.Success" OnClick="() => NavigateToFlightPlanDetails(context.Item.Id)" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <ChildRowContent>
        <NotamHandleCardComponent Notam="context.Item" ShowActions="true" OnNotamActionCreated="RemoveItemCallback"/>
    </ChildRowContent>
</MudDataGrid>

@code
{
    [Inject] public INotamService NotamService { get; set; } = null!;
    [Inject] public HttpClient HttpClient { get; set; } = null!;
    [Inject] public Blazored.LocalStorage.ILocalStorageService LocalStorage { get; set; } = null!;
    [Inject] public ApiAuthenticationStateProvider ApiAuthenticationStateProvider { get; set; } = null!;
    [Inject] public NavigationManager NavigationManager { get; set; } = null!;
    
    private List<Notam> Notams = [];
    
    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("jwt_token");
        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var authstate = await ApiAuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;
        
        if(!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            await GetAllNotams();
        }
    }
    
    private void RemoveItemCallback(Notam notam)
    {
        Notams.Remove(notam);
    }
    
    private async Task GetAllNotams()
    {
        StateHasChanged();

        try
        {
            var enumerableTask = NotamService.GetAllNotamsAsAsyncEnumerable();

            List<Notam> notamResults = [];
            Notams = notamResults;
            
            StateHasChanged();

            var i = 0;

            await foreach (var item in enumerableTask)
            {
                notamResults.Add(item);
                i++;

                if (i > 50)
                {
                    i = 0;
                    StateHasChanged();

                    await Task.Delay(100);
                }
            }
        }
        catch
        {
            Notams = [];
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void NavigateToFlightPlanDetails(int NotamId)
    {
        // Navigate to the details page, including the FlightPlan.Id as a query parameter
        NavigationManager.NavigateTo($"/map?Notam={NotamId}");
    }
}
