
ï»¿@using MudBlazor.Utilities
<MudDialog ContentStyle="height: 100vh">

    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1" />
            Create FlightPlan
        </MudText>
    </TitleContent>
    <DialogContent>

        <MudDropContainer T="DropItem" Items="@_dropzoneItems" @ref="_container" ItemsSelector="@((item,dropzone) => item.Selector == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
            <ChildContent>
                @for (int i = 1; i < 3; i++)
                {
                    var dropzone = i.ToString();
                    <MudPaper Class="ma-4 flex-grow-1">
                        <MudList T="string" Class="d-flex flex-column mud-height-full">
                            <MudListSubheader>Drop Zone @dropzone</MudListSubheader>
                            <MudDropZone T="DropItem" Identifier="@dropzone" Class="flex-grow-1" AllowReorder="true" />
                        </MudList>
                    </MudPaper>
                }
            </ChildContent>
            <ItemRenderer>
                <MudListItem T="string" Text="@($"{context.ICAO}")" />
            </ItemRenderer>
        </MudDropContainer>



    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Success" OnClick="Save">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Inject] public IAirportService AirportService { get; set; } = null!;
    [Inject] public ISnackbar Snackbar { get; set; } = null!;
    [Inject] public IFlightPlanService FlightPlanService { get; set; } = null!;
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; } = null!;

    private MudDropContainer<DropItem> _container;
    private IEnumerable<Airport> selectedairports = new List<Airport>();
    private List<Airport> airports { get; set; } = [];
    private List<DropItem> _dropzoneItems = new List<DropItem>();


    protected override async Task OnInitializedAsync()
    {
        MudDialog.Options.CloseOnEscapeKey = true;
        MudDialog.Options.BackdropClick = false;

        // Fetch all airports to show in the MudSelect
        var result = await AirportService.GetAllAsync();
        airports = result.ToList();
        int i = 0;
        int select = 1;
        airports.ForEach(airport =>
        {
            _dropzoneItems.Add(new DropItem()
            {
                Id = airport.Id,
                ICAO = airport.ICAO,
                FIR = airport.FIR,
                Selector = select.ToString(),
                Order = i
            });
            i++;
        });

        RefreshContainer();

    }

    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Selector = dropItem.DropzoneIdentifier;

        var indexOffset = dropItem.DropzoneIdentifier switch
        {
            "2" => _dropzoneItems.Count(x => x.Selector == "1"),
            _ => 0
        };

        _dropzoneItems.UpdateOrder(dropItem, item => item.Order, indexOffset);
    }

    private void RefreshContainer()
    {
        //update the binding to the container
        StateHasChanged();

        //the container refreshes the internal state
        _container.Refresh();

    }

    private void Cancel() => MudDialog.Cancel();

    private void Save()
    {

        selectedairports = _dropzoneItems.Where(x => x.Selector == "2").OrderBy(x => x.Order).Select(x => airports.First(y => y.Id==x.Id));


        if (selectedairports.Count() == 0)
        {
            Snackbar.Add("No airports selected!", Severity.Warning);
            return;
        }

        // Save new flight plan with selected airports in the order they were selected
        var flightPlan = new FlightPlan()
        {
            Airports = selectedairports.ToList()
        };

        FlightPlanService.AddAsync(flightPlan);
        Snackbar.Add("FlightPlan Created!", Severity.Success);
        MudDialog.Close(DialogResult.Ok(flightPlan));
    }

    public class DropItem
    {
        public int Id { get; set; }
        public string ICAO { get; set; }
        public string FIR { get; set; }
        public string Selector { get; set; }
        public int Order { get; set; }
    }

}
