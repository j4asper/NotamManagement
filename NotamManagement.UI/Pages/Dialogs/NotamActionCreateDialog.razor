<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1"/>
            Create notam action
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudExpansionPanels Class="mb-2">
            <MudExpansionPanel Text="View Raw NOTAM">
                <MudText>
                    <pre>@Notam.RawNotam</pre>
                </MudText>
            </MudExpansionPanel>
        </MudExpansionPanels>
        <MudSelect T="Importance" Variant="Variant.Outlined" @bind-Value="@NotamAction!.Importance">
            @foreach (Importance item in Enum.GetValues(typeof(Importance)))
            {
                <MudSelectItem Value="@item">@item</MudSelectItem>
            }
        </MudSelect>
        <MudTextField T="string" @bind-Value="@NotamAction!.Note" Variant="Variant.Outlined" Lines="3" Label="Note"/>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Success" OnClick="Save">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; } = null!;

    [Inject] public ISnackbar Snackbar { get; set; } = null!;
    
    [EditorRequired] [Parameter] public Notam Notam { get; set; } = null!;

    private NotamAction? NotamAction { get; set; }

    protected override void OnInitialized()
    {
        NotamAction = new NotamAction
        {
            NotamId = Notam.Id,
            OrganizationId = 1,
            Note = string.Empty
        };
    }

    private void Cancel() => MudDialog.Cancel();

    private void Save()
    {
        // Save new notam action with NotamActionService
        Snackbar.Add("Notam Action Created!", Severity.Success);
        MudDialog.Close(DialogResult.Ok(Notam));
    }
}