@page "/login"
@using System.Net.Http.Headers

@inject HttpClient Http
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject ApiAuthenticationStateProvider AuthStateProvider

<MudPaper Class="pa-4" Width="400px">
    <MudText Class="mb-2" Typo="Typo.h4">Login</MudText>
    <MudForm Class="gap-2" Model="@loginModel">
        <MudText>@errorMessage</MudText>
        <MudTextField T="string" Immediate="true" Variant="Variant.Outlined" Required="true" @bind-Value="@loginModel.Email" For="@(() => loginModel.Email)" Placeholder="Email" InputType="InputType.Email"/>
        <MudTextField T="string" Immediate="true" Variant="Variant.Outlined" Required="true" @bind-Value="@loginModel.Password" For="@(() => loginModel.Password)" Placeholder="Password" InputType="InputType.Password"/>
        <MudButton OnClick="@HandleLogin" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
    </MudForm>
</MudPaper>

@code {
    private LoginModel loginModel = new();
    private string errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            // Post the login model to the API
            var response = await Http.PostAsJsonAsync("/login", loginModel);
            response.EnsureSuccessStatusCode();

            // Deserialize the JSON response into the TokenResponse object
            var tokenResponse = await response.Content.ReadFromJsonAsync<TokenResponse>();

            // Access the access token from the response
            var token = tokenResponse!.AccessToken;

            // Store the token in local storage
            await LocalStorage.SetItemAsync("jwt_token", token);

            // Set the default authorization header for the HttpClient
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            // Notify the AuthenticationStateProvider that the user is now authenticated
            AuthStateProvider.NotifyUserAuthentication(token);

            // Navigate to the home page
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = $"Login failed: {ex.Message}";
        }
    }

    public class LoginModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    public class TokenResponse
{
    public required string AccessToken { get; set; } // The actual token string
    public int ExpiresIn { get; set; } // Expiration time in seconds
}
}
