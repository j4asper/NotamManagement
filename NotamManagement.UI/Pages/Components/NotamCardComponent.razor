@using NotamManagement.UI.Pages.Dialogs
<MudCard Elevation="0" Class="mb-2 ma-4 border-solid border-2 mud-border-primary pa-2" Style="width: 500px; height: 250px;">
    @if (Notam.ReferenceIdentifier is not null)
    {
        <MudStack Class="mb-2" Row="true">
            <MudText><b>@Notam.Identifier</b></MudText>
            <MudSpacer />
            <MudText><b>@Notam.ReferenceIdentifier</b></MudText>
        </MudStack>
    }
    else
    {
        <MudText Class="mb-2" Align="Align.Left"><b>@Notam.Identifier</b></MudText>
    }
    <MudText Align="Align.Left"><b>Type:</b> @Notam.Type</MudText>
    <MudText Align="Align.Left"><b>NOF:</b> @Notam.NotamOffice</MudText>
    <MudText Align="Align.Left"><b>Valid To:</b> @Notam.ValidFrom</MudText>
    <MudText Align="Align.Left"><b>Valid To:</b> @(Notam.IsPermanent ? "Permanent" : Notam.ValidTo)</MudText>
    <MudSpacer/>
    <MudButton Style="width: 200px;" OnClick="OpenNotamActionCreateDialog" Color="Color.Primary" Variant="Variant.Filled">Do something</MudButton>
</MudCard>

@code {
    [Inject] public IDialogService DialogService { get; set; } = null!;
    [Inject] public NavigationManager NavigationManager { get; set; } = null!;
    
    [EditorRequired][Parameter] public Notam Notam { get; set; } = null!;
    private NotamAction notamAction { get; set; } = null!;

    [Inject] public ApiAuthenticationStateProvider AuthStateProvider { get; set; }

    private async Task OpenNotamActionCreateDialog()
    {

        // Get the authentication state
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Retrieve the OrganizationId claim
        var organizationIdClaim = user.FindFirst("OrganizationId");
        if (organizationIdClaim != null)
        {
            notamAction = new NotamAction()
                {
                    NotamId = Notam.Id,
                    OrganizationId = int.Parse(organizationIdClaim.Value)

                };


        }
        else
        {
            throw new Exception("OrganizationId claim not found");
        }

        var parameters = new DialogParameters<NotamActionCreateDialog> { { x => x.Notam, Notam }, { x => x.NotamAction, notamAction } };

        var dialog = await DialogService.ShowAsync<NotamActionCreateDialog>("Do something to this notam", parameters);
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            NavigationManager.NavigateTo("/flightlist");
            
            NavigationManager.NavigateTo("/");
        }
    }
}