@using NotamManagement.UI.Pages.Dialogs
<MudCard Elevation="0" Class="mb-2 ma-4 border-solid border-2 mud-border-primary pa-2" Style="width: 500px; height: 250px;">
    <MudChip T="string" Color="GetChipColor()">@NotamAction.Importance.ToString()</MudChip>

    <MudText Align="Align.Left">Type: @NotamAction.Importance</MudText>
    <MudText Align="Align.Left">Note: @NotamAction.Note</MudText>
    <MudStack Row="true">
        <MudButton Style="width: 200px;" OnClick="OpenNotamDialog" Color="Color.Primary" Variant="Variant.Filled">See notam</MudButton>
        <MudButton Style="width: 200px;" OnClick="OpenEditNotamAction" Color="Color.Primary" Variant="Variant.Filled">Edit</MudButton>
    </MudStack>

</MudCard>

@code {
    [EditorRequired][Parameter] public NotamAction NotamAction { get; set; } = null!;
    [Inject] public IDialogService DialogService { get; set; } = null!;

    private Color GetChipColor()
    {
        return NotamAction.Importance switch
        {
            Importance.Ignore => Color.Default,
            Importance.Important => Color.Error,
            _ => Color.Primary
        };
    }

    private async Task OpenEditNotamAction()
    {
        var parameters = new DialogParameters<NotamActionUpdateDialog> { { x => x.NotamAction, NotamAction } };

        var dialog = await DialogService.ShowAsync<NotamActionUpdateDialog>("Edit notam action", parameters);
        var result = await dialog.Result;
    }

    private async Task OpenNotamDialog()
    {

        

        var parameters = new DialogParameters<ViewNotamFromNotamActionDialog> {{ x => x.NotamAction, NotamAction } };

        var dialog = await DialogService.ShowAsync<ViewNotamFromNotamActionDialog>("View notam", parameters);
        var result = await dialog.Result;

       
    }


}